// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// node_wise_pseudo_ll
double node_wise_pseudo_ll(const arma::colvec& y_it, arma::mat Omega);
RcppExport SEXP _IsingGraph_node_wise_pseudo_ll(SEXP y_itSEXP, SEXP OmegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type y_it(y_itSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega(OmegaSEXP);
    rcpp_result_gen = Rcpp::wrap(node_wise_pseudo_ll(y_it, Omega));
    return rcpp_result_gen;
END_RCPP
}
// node_wise_generalized_ll
double node_wise_generalized_ll(const arma::colvec y_it, arma::mat Omega, const int a);
RcppExport SEXP _IsingGraph_node_wise_generalized_ll(SEXP y_itSEXP, SEXP OmegaSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec >::type y_it(y_itSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const int >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(node_wise_generalized_ll(y_it, Omega, a));
    return rcpp_result_gen;
END_RCPP
}
// log_likelihood_ratio_flip
double log_likelihood_ratio_flip(const arma::colvec& tilde_y, const arma::mat& tilde_X, const arma::colvec& tilde_beta, const double new_beta, const int node);
RcppExport SEXP _IsingGraph_log_likelihood_ratio_flip(SEXP tilde_ySEXP, SEXP tilde_XSEXP, SEXP tilde_betaSEXP, SEXP new_betaSEXP, SEXP nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type tilde_y(tilde_ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type tilde_X(tilde_XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type tilde_beta(tilde_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type new_beta(new_betaSEXP);
    Rcpp::traits::input_parameter< const int >::type node(nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(log_likelihood_ratio_flip(tilde_y, tilde_X, tilde_beta, new_beta, node));
    return rcpp_result_gen;
END_RCPP
}
// log_likelihood_ratio_swap
double log_likelihood_ratio_swap(const arma::colvec& tilde_y, const arma::mat& tilde_X, const arma::colvec& tilde_beta, const double new_beta, const int old_node_1, const int new_node_1);
RcppExport SEXP _IsingGraph_log_likelihood_ratio_swap(SEXP tilde_ySEXP, SEXP tilde_XSEXP, SEXP tilde_betaSEXP, SEXP new_betaSEXP, SEXP old_node_1SEXP, SEXP new_node_1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type tilde_y(tilde_ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type tilde_X(tilde_XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type tilde_beta(tilde_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type new_beta(new_betaSEXP);
    Rcpp::traits::input_parameter< const int >::type old_node_1(old_node_1SEXP);
    Rcpp::traits::input_parameter< const int >::type new_node_1(new_node_1SEXP);
    rcpp_result_gen = Rcpp::wrap(log_likelihood_ratio_swap(tilde_y, tilde_X, tilde_beta, new_beta, old_node_1, new_node_1));
    return rcpp_result_gen;
END_RCPP
}
// log_likelihood_ratio_swap_v2
double log_likelihood_ratio_swap_v2(const arma::colvec& tilde_y, const arma::mat& tilde_X, const arma::colvec& tilde_beta, const double new_beta, const int old_one, const int new_one);
RcppExport SEXP _IsingGraph_log_likelihood_ratio_swap_v2(SEXP tilde_ySEXP, SEXP tilde_XSEXP, SEXP tilde_betaSEXP, SEXP new_betaSEXP, SEXP old_oneSEXP, SEXP new_oneSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type tilde_y(tilde_ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type tilde_X(tilde_XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type tilde_beta(tilde_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type new_beta(new_betaSEXP);
    Rcpp::traits::input_parameter< const int >::type old_one(old_oneSEXP);
    Rcpp::traits::input_parameter< const int >::type new_one(new_oneSEXP);
    rcpp_result_gen = Rcpp::wrap(log_likelihood_ratio_swap_v2(tilde_y, tilde_X, tilde_beta, new_beta, old_one, new_one));
    return rcpp_result_gen;
END_RCPP
}
// bayes_logit
arma::mat bayes_logit(const arma::colvec& y, const arma::mat& X, const arma::colvec& b0, const arma::mat& B0, const arma::colvec& bstart, const int sample, const int burn, const int thinning);
RcppExport SEXP _IsingGraph_bayes_logit(SEXP ySEXP, SEXP XSEXP, SEXP b0SEXP, SEXP B0SEXP, SEXP bstartSEXP, SEXP sampleSEXP, SEXP burnSEXP, SEXP thinningSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B0(B0SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type bstart(bstartSEXP);
    Rcpp::traits::input_parameter< const int >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< const int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< const int >::type thinning(thinningSEXP);
    rcpp_result_gen = Rcpp::wrap(bayes_logit(y, X, b0, B0, bstart, sample, burn, thinning));
    return rcpp_result_gen;
END_RCPP
}
// quasi_Ising
Rcpp::List quasi_Ising(const arma::colvec& y, const arma::mat& X, const double var_int, const double var_coef, const double pi_slab, const int sample, const int burn, const int thinning);
RcppExport SEXP _IsingGraph_quasi_Ising(SEXP ySEXP, SEXP XSEXP, SEXP var_intSEXP, SEXP var_coefSEXP, SEXP pi_slabSEXP, SEXP sampleSEXP, SEXP burnSEXP, SEXP thinningSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type var_int(var_intSEXP);
    Rcpp::traits::input_parameter< const double >::type var_coef(var_coefSEXP);
    Rcpp::traits::input_parameter< const double >::type pi_slab(pi_slabSEXP);
    Rcpp::traits::input_parameter< const int >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< const int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< const int >::type thinning(thinningSEXP);
    rcpp_result_gen = Rcpp::wrap(quasi_Ising(y, X, var_int, var_coef, pi_slab, sample, burn, thinning));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mvrnormArma1
arma::colvec cpp_mvrnormArma1(const arma::colvec& mu, const arma::mat& sigma);
RcppExport SEXP _IsingGraph_cpp_mvrnormArma1(SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mvrnormArma1(mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// cpp_polyagamma_h1_truncated
arma::colvec cpp_polyagamma_h1_truncated(const arma::colvec& z, const int& trunc);
RcppExport SEXP _IsingGraph_cpp_polyagamma_h1_truncated(SEXP zSEXP, SEXP truncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const int& >::type trunc(truncSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_polyagamma_h1_truncated(z, trunc));
    return rcpp_result_gen;
END_RCPP
}
// cpp_polyagamma_h1_devroye
arma::colvec cpp_polyagamma_h1_devroye(const arma::colvec& z);
RcppExport SEXP _IsingGraph_cpp_polyagamma_h1_devroye(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_polyagamma_h1_devroye(z));
    return rcpp_result_gen;
END_RCPP
}
// rpg
Rcpp::NumericVector rpg(const arma::colvec z, const int trunc);
RcppExport SEXP _IsingGraph_rpg(SEXP zSEXP, SEXP truncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec >::type z(zSEXP);
    Rcpp::traits::input_parameter< const int >::type trunc(truncSEXP);
    rcpp_result_gen = Rcpp::wrap(rpg(z, trunc));
    return rcpp_result_gen;
END_RCPP
}
// w_variable_selection_step
std::string w_variable_selection_step(arma::mat& gamma, arma::mat& omega, const int p, const arma::colvec& y, const arma::mat& X, const double var_int, const double var_coef, const double pi_slab);
RcppExport SEXP _IsingGraph_w_variable_selection_step(SEXP gammaSEXP, SEXP omegaSEXP, SEXP pSEXP, SEXP ySEXP, SEXP XSEXP, SEXP var_intSEXP, SEXP var_coefSEXP, SEXP pi_slabSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type var_int(var_intSEXP);
    Rcpp::traits::input_parameter< const double >::type var_coef(var_coefSEXP);
    Rcpp::traits::input_parameter< const double >::type pi_slab(pi_slabSEXP);
    rcpp_result_gen = Rcpp::wrap(w_variable_selection_step(gamma, omega, p, y, X, var_int, var_coef, pi_slab));
    return rcpp_result_gen;
END_RCPP
}
// w_variable_selection_step_v2
std::string w_variable_selection_step_v2(arma::mat& gamma, arma::mat& omega, const int p, const arma::colvec& y, const arma::mat& X, const double var_int, const double var_coef, const double pi_slab, const double beta);
RcppExport SEXP _IsingGraph_w_variable_selection_step_v2(SEXP gammaSEXP, SEXP omegaSEXP, SEXP pSEXP, SEXP ySEXP, SEXP XSEXP, SEXP var_intSEXP, SEXP var_coefSEXP, SEXP pi_slabSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type var_int(var_intSEXP);
    Rcpp::traits::input_parameter< const double >::type var_coef(var_coefSEXP);
    Rcpp::traits::input_parameter< const double >::type pi_slab(pi_slabSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(w_variable_selection_step_v2(gamma, omega, p, y, X, var_int, var_coef, pi_slab, beta));
    return rcpp_result_gen;
END_RCPP
}
// w_cpp_update_Omega
std::string w_cpp_update_Omega(const arma::mat& gamma, arma::mat& omega, const int p, const arma::colvec& y, const arma::mat& X, const double pi_slab, const double var_slab);
RcppExport SEXP _IsingGraph_w_cpp_update_Omega(SEXP gammaSEXP, SEXP omegaSEXP, SEXP pSEXP, SEXP ySEXP, SEXP XSEXP, SEXP pi_slabSEXP, SEXP var_slabSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double >::type pi_slab(pi_slabSEXP);
    Rcpp::traits::input_parameter< const double >::type var_slab(var_slabSEXP);
    rcpp_result_gen = Rcpp::wrap(w_cpp_update_Omega(gamma, omega, p, y, X, pi_slab, var_slab));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_IsingGraph_node_wise_pseudo_ll", (DL_FUNC) &_IsingGraph_node_wise_pseudo_ll, 2},
    {"_IsingGraph_node_wise_generalized_ll", (DL_FUNC) &_IsingGraph_node_wise_generalized_ll, 3},
    {"_IsingGraph_log_likelihood_ratio_flip", (DL_FUNC) &_IsingGraph_log_likelihood_ratio_flip, 5},
    {"_IsingGraph_log_likelihood_ratio_swap", (DL_FUNC) &_IsingGraph_log_likelihood_ratio_swap, 6},
    {"_IsingGraph_log_likelihood_ratio_swap_v2", (DL_FUNC) &_IsingGraph_log_likelihood_ratio_swap_v2, 6},
    {"_IsingGraph_bayes_logit", (DL_FUNC) &_IsingGraph_bayes_logit, 8},
    {"_IsingGraph_quasi_Ising", (DL_FUNC) &_IsingGraph_quasi_Ising, 8},
    {"_IsingGraph_cpp_mvrnormArma1", (DL_FUNC) &_IsingGraph_cpp_mvrnormArma1, 2},
    {"_IsingGraph_cpp_polyagamma_h1_truncated", (DL_FUNC) &_IsingGraph_cpp_polyagamma_h1_truncated, 2},
    {"_IsingGraph_cpp_polyagamma_h1_devroye", (DL_FUNC) &_IsingGraph_cpp_polyagamma_h1_devroye, 1},
    {"_IsingGraph_rpg", (DL_FUNC) &_IsingGraph_rpg, 2},
    {"_IsingGraph_w_variable_selection_step", (DL_FUNC) &_IsingGraph_w_variable_selection_step, 8},
    {"_IsingGraph_w_variable_selection_step_v2", (DL_FUNC) &_IsingGraph_w_variable_selection_step_v2, 9},
    {"_IsingGraph_w_cpp_update_Omega", (DL_FUNC) &_IsingGraph_w_cpp_update_Omega, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_IsingGraph(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
